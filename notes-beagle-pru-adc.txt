January 30, 2019
Notes on using ADC with PRU.

1. Starting with 
init_adc() and read_adc(chan) from
/usr/lib/ti/pru-software-support-package/examples/am335x/PRU_ADC

which are added to main_pru0.c

2. changed code to read from channels 0 to 3.

Using read_adc(0) seem to get multiple channels.
maybe need to disable other channels so it doesn't get in FIFO?


not consistent, reading chan 0 to 3 instead of just 0...

Need to empty FIFO?


With Chan0=1.8, and Chan 1=0.0, get:
fff        0      83b      636      fff        0      63b      602 
or 
 0      fff        0      83a      627      fff        0      639      5fb    
With Chan0=0 and Chan 1=1.8, get:
fff        0      fff      f9a      96b        0      fff      f98 
or
fff        0      fff      f9d      96d        0      fff      f97      baf  

3. Are STEPENABLE ever set to zero? Maybe extra channels are turned on?
   ADC_TSC.STEPENABLE_bit.STEP1 
Add reset of STEPENABLE to init_adc()?
#include <sys_tscAdcSs.h>  // touch screen A/D?
/usr/lib/ti/pru-software-support-package/include
added:
ADC_TSC.STEPENABLE = ADC_TSC.STEPENABLE & 0xfffe0000;

Still reads 4 channels...

Maybe runs anyway?

4. in init_adc(), set each step to point to chan 0.
==> works to read just channel 0.

5. Speed very low
AtoD buffer 1e3 reads. Takes: 9,428,088us (this is 9 ms per 128 bytes!)

6. Try removing averaging from A/D read.
AtoD buffer 1e3 reads. Takes: 6,004,066us (this is 6 ms per 128 bytes!)

7. Is FIFO not empty when first read?

Note: file.map shows address of constants such as PRU_SHAREDMEM
.text shows start for each function
                0x00000278    00000094     main_pru0.object (.text:read_adc)

uint32_t count = ADC_TSC.FIFO0COUNT;
gives count=4, (maybe because each a/d read from step is in FIFO?)
prudbg break at 
LBBO      &r0, r1, 228, 4 (loads r0 from ADC_TSC base + 0xe4 = FIFO0COUNT) 
br 0 0xa0

228=0xe4

switch(adc_chan) is executing all cases????
missing break!

got 5 reads in FIFO by time it got to 
while (ADC_TSC.FIFO0COUNT == 0) line

8. switch statement does not compile correctly!
Recompile to use only channel0!

still quite slow...

9. Change openDelay and Sample Delay to be 0x01 (should be set by reset to 0)
   ADC_TSC.STEPDELAY1_bit.OPENDELAY = 0x01;
   ADC_TSC.STEPDELAY1_bit.SAMPLEDELAY = 0x01;
AtoD buffer 1e3 reads. Takes: 1085136us
6X faster.

Changed to delay 16 clock cycles, now 17 us/conversion
AtoD buffer 1e3 reads. Takes: 2178175us

OPENDELAY = 0x010;  SAMPLEDELAY = 0x0;
AtoD buffer 1e3 reads. Takes: 1561404us 12.2 us

OPENDELAY = 0x0; SAMPLEDELAY = 0x0;
AtoD buffer 1e3 reads. Takes: 1018944us 7.9 us

10. Now need to add clock output to drive camera
Use servo channel 8.

Clear SYSCFG[STANDBY_INIT] to enable OCP master port

how to access this in C so don't need to do initialization in assembly?
#include <pru_cfg.h>
CT_CFG.SYSCFG_bit.STANDBY_INIT =0;
-----------------------
11.  How to access r30 from c language?
/usr/lib/ti/pru-software-support-package/examples/am335x
__r30

c programming manual
http://www.ti.com/lit/ug/spruhv7b/spruhv7b.pdf
5.7.2 Global Register Variables

CH8BIT should be r30_5

12. setting delay using: __delay_cycles(100000000);?


13. ERROR in rc_encoder_pru_init, am335x-pru0-rc-encoder-fw failed to load
attempting to stop PRU0
==>Fixed by rebooting/resetting CPU. Something got wedged???

14. How are output pins set for rc_test_servo?

maybe something got set, try reset...
src/pru/pru.c: int rc_pru_start(int ch, const char* fw_name)
src/pru/servo.c: calls rc pru start. only GPIO set is for power enable

==> pins may be set by kernel???

config-pin $pin pruout
config-pin -q $pin
config-pin -i P8_27 or config-pin -i P8.27 or config-pin -i P8-27


What is actual list of available pins?
/sys/devices/platform/ocp/ (these seem to be for Beaglebone Black)



Looks like 2 separate r30 output registers, one for each PRU. Set by GPIO mode, not PRU select.

but will also need to set GP output, e.g. from rc_test_servo...

compiler option:
--absolute_listing
Generates a listing with absolute addresses rather than section-relative.

16. R30 output register PRU0_R30 has different pins than PRU1_R30. Some missing on Beaglebone spreadsheet.

To see configuration of pins:
 https://github.com/mvduin/bbb-pin-utils
 sudo ./show-pins
 sudo ./show-pins | grep pru
 
15. see if can drive an LED from servo output through PRU
QEP_3A = P8.12 = pru_30_14
sudo config-pin P8.12 pruout 
P8_12 pinmux file not found!
bash: /sys/devices/platform/ocp/ocp*P8_12_pinmux/state: No such file or directory
Does the device need to be enabled at boot time?

Maybe have to use PRU1- ipns all set up
ocp/helper?
/sys/devices/platform/ocp/ocp:helper$
rc_pinmux_set()?

How to mode on a pin? rc_pinmux_set has only limited modes...
and modes are set through device driver...

May have to use PRU1?

Or can PRU write directly to a GPIO that is already setup as an output?
(Without going through R30?

#define GPIO1 0x4804C000

16. pru0 code is not the new C file, but the old version. Why did it not install with sudo make install?
Old files in build directory, erased, now get linking errors

not building object files for some reason?
DON't USE ABSOLUTE LISTING IN MAKEFILE #--absolute_listing won't make .object files

17. GPIO1 works to blink onboard LEDS. Pinmux was already set for these pins.
How to use pinmux directly to setup 
output bits for SI and CLK?
Use rc_pinmux_set/rc_gpio_init 

What is gpiochip? gpio0 corresponds to gpiochip0
0x44e07000 = GPIO0

/sys/devices/platform/ocp/44e07000.gpio/gpio/gpiochip0
/sys/devices/platform/ocp/4804c000.gpio/gpio/gpiochip32
/sys/devices/platform/ocp/481ac000.gpio/gpio/gpiochip64
/sys/devices/platform/ocp/481ae000.gpio/gpio/gpiochip96

https://www.elinux.org/CI20_GPIO_LED_Blink_Tutorial


18. any utility to slow slew mode?
https://e2e.ti.com/support/processors/f/791/t/233997?AM335x-Slow-Slew-Rate
``We also determined the IO cells used in AM335x were not providing any significant change in slew rate. 
Therefore, there wasn't any value in characterizing the device while operating in slow mode.''


19. more details on GPIO
http://derekmolloy.ie/gpios-on-the-beaglebone-black-using-device-tree-overlays/

---------------------------------------------
Need to use Once Chip Peripheral OCP?

9.2.2 Pad Control Registers
9.2.2.1 Mode Selection
Table 9-60. conf_<module>_<pin> Register Field Descriptions
offset 984h conf_uart1_txd
offset 980h conf_uart1_rxd
9.3.1.50 conf_<module>_<pin> Register (offset = 800hâ€“A34h)

maybe use:
config-pin -i P9.26? for gpio0[14]
and 
config-pin P9.24 for gpio[15]?

(pins are probably avail from rc, but would be nice to initialize from PRU?)

dt-bindings/pinctrl/am33xx.h
/opt/source/dtb-4.14-ti/include/dt-bindings
/opt/source/dtb-4.14-ti/include/dt-bindings/pinctrl/omap.h
#define AM33XX_IOPAD(pa, val)           OMAP_IOPAD_OFFSET((pa), 0x0800) (val)


------------------------
NOT NEEDED
The internal pinmuxing is programmable through the PIN_MX 
union {
                volatile uint32_t PIN_MX;

                volatile struct {
                        unsigned PIN_MUX_SEL : 8;       // 7:0
                        unsigned rsvd2 : 24;            // 31:8
                } PIN_MX_bit;
        };      //0x40
} pruCfg;

pin_mux_sel[1]==> pru0_pru_r30[13:8] = pru_r30[5:0]
else just pru_r30[113:8]